import React from 'react';

// Creating a input field for SearchBar component.

class SearchBar extends React.Component {
  // The constructor() runs automatically when the class is initialized.
  // Calling super() within that method lets us access this.state
  // within the constructor, since our class is a subclass of React.Component

  constructor() {
    super();
    this.state = { term: '' }
  }

  // Telling React that every time it notices we've changed our input,
  // it should fire an onChange event and pass teh value - our search term -
  // to our onInputChange() class method.

  // When you're initializing state in the contructor,
  // you can set it directly with this.state = {}
  // However, if you want to signal to React that the state has changed,
  // so that it knows to re-render, you need to call this.setState() instead.
  // this means you should never call this.state = {} outside of a class constructor.

  // Where does this.props.onTermChange(term); come from
  // Need a way to pass data from a child component (SearchBar) 
  // to its parent (App), and in react, we can do that through props -- data
  // or callbacks passed from a parent component. 
  onInputChange(term) {
    this.({ term });
    this.props.onTermChange(term);
  }
  
  render () {
    return (
      <div className="search">
        <input placeholder="Search for gifs!"
          // every time the input is updated,
          // React's onChange property automatically fires.
          onChange={event => this.onInputChange(event.target.value)} />
      </div>
    );
  }
}

export default SearchBar;

// before ES2015

// function(event) {
//   this.onInputChange(event.target.value);
// }